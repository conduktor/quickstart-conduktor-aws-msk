AWSTemplateFormatVersion: "2010-09-09"
Description: ""
Parameters:  
  VpcID: 
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  SubnetIDs: 
    Description: PLEASE SELECT 3. Subnet IDs that can communicate with your Kafka cluster
    Type: List<AWS::EC2::Subnet::Id>
  PublicSubnetIDs: 
    Description: Subnet IDs that are public to access your ALB
    Type: List<AWS::EC2::Subnet::Id>
  MSKSecurityGroupID:
    Description: The Security Group ID of MSK
    Type: AWS::EC2::SecurityGroup::Id
  MSKBootstrapServersURL: 
    Description: Bootstrap server for your MSK cluster
    Type: String


Resources:
    ECSTaskRoleForConduktorPlatform:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Join
              - '-'
              - - ECSTaskRoleForConduktorPlatform
                - !Ref 'AWS::StackName' 
            AssumeRolePolicyDocument:
              Statement:
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  Service: ecs-tasks.amazonaws.com 


    MSKClusterIAMFullAccessPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: !Join
              - '-'
              - - MSKClusterIAMFullAccess
                - !Ref 'AWS::StackName'
            Roles: 
              - !Ref ECSTaskRoleForConduktorPlatform
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "kafka-cluster:*",
                            "Resource": "*"
                        }
                    ]
                }

    ECSCluster:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: !Join
              - '-'
              - - conduktor-platform-cluster
                - !Ref 'AWS::StackName'
            CapacityProviders: 
              - "FARGATE"
              - "FARGATE_SPOT"

    ECSService:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: "conduktor-platform"
            Cluster: !GetAtt ECSCluster.Arn
            DesiredCount: 1
            LaunchType: "FARGATE"
            PlatformVersion: "LATEST"
            TaskDefinition: !Ref ECSTaskDefinition
            DeploymentConfiguration: 
                MaximumPercent: 200
                MinimumHealthyPercent: 0
                DeploymentCircuitBreaker: 
                    Enable: true
                    Rollback: true
            NetworkConfiguration: 
                AwsvpcConfiguration: 
                    AssignPublicIp: "ENABLED"
                    SecurityGroups: 
                      - !Ref FargateSecurityGroup
                    Subnets: !Ref SubnetIDs
            SchedulingStrategy: "REPLICA"
            DeploymentController: 
                Type: "ECS"
            LoadBalancers:
            - ContainerName: conduktor-platform
              ContainerPort: 80
              TargetGroupArn: !Ref ECSTargetGroup
        DependsOn:
            - ALBPublicListener

    FargateSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow traffic into our Fargate Tasks
        VpcId: !Ref VpcID
        SecurityGroupIngress:
          - FromPort: "80"
            ToPort: "80"
            SourceSecurityGroupId: !Ref ALBSecurityGroup
            IpProtocol: "tcp"

    MSKInboundRule:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId: !Ref FargateSecurityGroup
        GroupId: !Ref MSKSecurityGroupID

    ECSTaskDefinition:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions: 
              - 
                DockerLabels: {}
                Environment: 
                  - 
                    Name: "CDK_IN_CONF_FILE"
                    Value: "/etc/conduktor-platform-config/conduktor-platform-no-license.yaml"
                  # if you have a license, uncomment the lines below:
                  # - 
                  #   Name: "LICENSE_KEY"
                  #   Value: "<your license key here>"
                  # - 
                  #   Name: "CDK_IN_CONF_FILE"
                  #   Value: "/etc/conduktor-platform-config/conduktor-platform.yaml"
                  - 
                    Name: "MSK_BOOTSTRAP_SERVERS"
                    Value: !Ref MSKBootstrapServersURL
                  - 
                    Name: "RUN_MODE"
                    Value: "nano"
                Essential: true
                Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/conduktor-platform-msk:latest
                MountPoints:
                    - ContainerPath: /var/conduktor
                      SourceVolume: my-efs
                LogConfiguration: 
                    LogDriver: "awslogs"
                    Options: 
                        awslogs-create-group: "true"
                        awslogs-group: "/ecs/conduktor-platform"
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: "ecs"
                Name: "conduktor-platform"
                PortMappings: 
                  - 
                    ContainerPort: 80
                    HostPort: 80
                    Protocol: "tcp"
            Family: "conduktor-platform"
            TaskRoleArn: !GetAtt ECSTaskRoleForConduktorPlatform.Arn
            ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
            NetworkMode: "awsvpc"
            RequiresCompatibilities: 
              - "FARGATE"
            Cpu: "2048"
            Memory: "8192"
            Volumes:
                - EFSVolumeConfiguration: 
                    FilesystemId: !Ref FileSystem
                    RootDirectory: /
                  Name: my-efs

    ECSTaskExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Join
              - '-'
              - - ecsTaskExecutionRole
                - !Ref 'AWS::StackName'
            AssumeRolePolicyDocument:
              Statement:
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  Service: ecs-tasks.amazonaws.com 
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"


    
    ECSServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub ecs-service-${AWS::StackName}
        Path: /
        AssumeRolePolicyDocument: |
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
        Policies:
          - PolicyName: !Sub ecs-service-${AWS::StackName}
            PolicyDocument:
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "ECSTaskManagement",
                        "Effect": "Allow",
                        "Action": [
                            "ec2:AttachNetworkInterface",
                            "ec2:CreateNetworkInterface",
                            "ec2:CreateNetworkInterfacePermission",
                            "ec2:DeleteNetworkInterface",
                            "ec2:DeleteNetworkInterfacePermission",
                            "ec2:Describe*",
                            "ec2:DetachNetworkInterface",
                            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                            "elasticloadbalancing:DeregisterTargets",
                            "elasticloadbalancing:Describe*",
                            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                            "elasticloadbalancing:RegisterTargets",
                            "route53:ChangeResourceRecordSets",
                            "route53:CreateHealthCheck",
                            "route53:DeleteHealthCheck",
                            "route53:Get*",
                            "route53:List*",
                            "route53:UpdateHealthCheck",
                            "servicediscovery:DeregisterInstance",
                            "servicediscovery:Get*",
                            "servicediscovery:List*",
                            "servicediscovery:RegisterInstance",
                            "servicediscovery:UpdateInstanceCustomHealthStatus"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "AutoScaling",
                        "Effect": "Allow",
                        "Action": [
                            "autoscaling:Describe*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "AutoScalingManagement",
                        "Effect": "Allow",
                        "Action": [
                            "autoscaling:DeletePolicy",
                            "autoscaling:PutScalingPolicy",
                            "autoscaling:SetInstanceProtection",
                            "autoscaling:UpdateAutoScalingGroup"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "Null": {
                                "autoscaling:ResourceTag/AmazonECSManaged": "false"
                            }
                        }
                    },
                    {
                        "Sid": "AutoScalingPlanManagement",
                        "Effect": "Allow",
                        "Action": [
                            "autoscaling-plans:CreateScalingPlan",
                            "autoscaling-plans:DeleteScalingPlan",
                            "autoscaling-plans:DescribeScalingPlans"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "CWAlarmManagement",
                        "Effect": "Allow",
                        "Action": [
                            "cloudwatch:DeleteAlarms",
                            "cloudwatch:DescribeAlarms",
                            "cloudwatch:PutMetricAlarm"
                        ],
                        "Resource": "arn:aws:cloudwatch:*:*:alarm:*"
                    },
                    {
                        "Sid": "ECSTagging",
                        "Effect": "Allow",
                        "Action": [
                            "ec2:CreateTags"
                        ],
                        "Resource": "arn:aws:ec2:*:*:network-interface/*"
                    },
                    {
                        "Sid": "CWLogGroupManagement",
                        "Effect": "Allow",
                        "Action": [
                            "logs:CreateLogGroup",
                            "logs:DescribeLogGroups",
                            "logs:PutRetentionPolicy"
                        ],
                        "Resource": "arn:aws:logs:*:*:log-group:/aws/ecs/*"
                    },
                    {
                        "Sid": "CWLogStreamManagement",
                        "Effect": "Allow",
                        "Action": [
                            "logs:CreateLogStream",
                            "logs:DescribeLogStreams",
                            "logs:PutLogEvents"
                        ],
                        "Resource": "arn:aws:logs:*:*:log-group:/aws/ecs/*:log-stream:*"
                    },
                    {
                        "Sid": "ExecuteCommandSessionManagement",
                        "Effect": "Allow",
                        "Action": [
                            "ssm:DescribeSessions"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "ExecuteCommand",
                        "Effect": "Allow",
                        "Action": [
                            "ssm:StartSession"
                        ],
                        "Resource": [
                            "arn:aws:ecs:*:*:task/*",
                            "arn:aws:ssm:*:*:document/AmazonECS-ExecuteInteractiveCommand"
                        ]
                    },
                    {
                        "Sid": "CloudMapResourceCreation",
                        "Effect": "Allow",
                        "Action": [
                            "servicediscovery:CreateHttpNamespace",
                            "servicediscovery:CreateService"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAllValues:StringEquals": {
                                "aws:TagKeys": [
                                    "AmazonECSManaged"
                                ]
                            }
                        }
                    },
                    {
                        "Sid": "CloudMapResourceTagging",
                        "Effect": "Allow",
                        "Action": "servicediscovery:TagResource",
                        "Resource": "*",
                        "Condition": {
                            "StringLike": {
                                "aws:RequestTag/AmazonECSManaged": "*"
                            }
                        }
                    },
                    {
                        "Sid": "CloudMapResourceDeletion",
                        "Effect": "Allow",
                        "Action": [
                            "servicediscovery:DeleteService"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "Null": {
                                "aws:ResourceTag/AmazonECSManaged": "false"
                            }
                        }
                    },
                    {
                        "Sid": "CloudMapResourceDiscovery",
                        "Effect": "Allow",
                        "Action": [
                            "servicediscovery:DiscoverInstances"
                        ],
                        "Resource": "*"
                    }
                ]
              }

    ALBSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Security group for our ALB
            SecurityGroupIngress:
                -   CidrIp: 0.0.0.0/0
                    Description: Allow from anyone on port 80
                    FromPort: 80
                    IpProtocol: tcp
                    ToPort: 80
            VpcId: !Ref VpcID

    ALBPublicListener:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - TargetGroupArn: !Ref ECSTargetGroup
                  Type: forward
            LoadBalancerArn: !Ref ALB
            Port: 80
            Protocol: HTTP

    ECSTargetGroup:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            Port: 80
            Protocol: HTTP
            TargetType: ip
            VpcId: !Ref VpcID
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: /platform/api/modules/health/live
            HealthCheckProtocol: HTTP
            UnhealthyThresholdCount: 5
    
    ALB:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
            Scheme: internet-facing
            SecurityGroups:
                - !Ref ALBSecurityGroup
            Subnets: !Ref PublicSubnetIDs
            Type: application

    MountTargetSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            VpcId: !Ref VpcID
            GroupDescription: Security group for mount target
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: '2049'
                    ToPort: '2049'
                    SourceSecurityGroupId: !Ref FargateSecurityGroup

    FileSystem:
        Type: 'AWS::EFS::FileSystem'
        Properties:
          FileSystemTags:
            - Key: Name
              Value: conduktor-platform

    MountTarget:
        Type: 'AWS::EFS::MountTarget'
        Properties:
            FileSystemId: !Ref FileSystem
            SubnetId: !Select [ 0, !Ref SubnetIDs ]
            SecurityGroups:
                - !Ref MountTargetSecurityGroup

    MountTarget2:
        Type: 'AWS::EFS::MountTarget'
        Properties:
            FileSystemId: !Ref FileSystem
            SubnetId: !Select [ 1, !Ref SubnetIDs ]
            SecurityGroups:
                - !Ref MountTargetSecurityGroup

    
    MountTarget3:
        Type: 'AWS::EFS::MountTarget'
        Properties:
            FileSystemId: !Ref FileSystem
            SubnetId: !Select [ 2, !Ref SubnetIDs ]
            SecurityGroups:
                - !Ref MountTargetSecurityGroup

            
# Outputs:
#   ecscluster:
#     Value: !Ref ECSCluster
#   ecsservice:
#     Value: !Ref service
#   MountTargetID:
#     Description: Mount target ID
#     Value: !Ref MountTarget
#   FileSystemID:
#     Description: File system ID
#     Value: !Ref FileSystem